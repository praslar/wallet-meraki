// Code generated by MockGen. DO NOT EDIT.
// Source: .\transaction.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTransactionServiceInterface is a mock of TransactionServiceInterface interface.
type MockTransactionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceInterfaceMockRecorder
}

// MockTransactionServiceInterfaceMockRecorder is the mock recorder for MockTransactionServiceInterface.
type MockTransactionServiceInterfaceMockRecorder struct {
	mock *MockTransactionServiceInterface
}

// NewMockTransactionServiceInterface creates a new mock instance.
func NewMockTransactionServiceInterface(ctrl *gomock.Controller) *MockTransactionServiceInterface {
	mock := &MockTransactionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceInterface) EXPECT() *MockTransactionServiceInterfaceMockRecorder {
	return m.recorder
}

// AirDropNewWallet mocks base method.
func (m *MockTransactionServiceInterface) AirDropNewWallet(toWalletID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AirDropNewWallet", toWalletID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AirDropNewWallet indicates an expected call of AirDropNewWallet.
func (mr *MockTransactionServiceInterfaceMockRecorder) AirDropNewWallet(toWalletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AirDropNewWallet", reflect.TypeOf((*MockTransactionServiceInterface)(nil).AirDropNewWallet), toWalletID)
}

// CreateTransaction mocks base method.
func (m *MockTransactionServiceInterface) CreateTransaction(fromWalletID, toWalletID, tokenID uuid.UUID, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", fromWalletID, toWalletID, tokenID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionServiceInterfaceMockRecorder) CreateTransaction(fromWalletID, toWalletID, tokenID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionServiceInterface)(nil).CreateTransaction), fromWalletID, toWalletID, tokenID, amount)
}

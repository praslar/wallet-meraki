// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repo/token.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	reflect "reflect"
	model "wallet/internal/model"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTokenRepoInterface is a mock of TokenRepoInterface interface.
type MockTokenRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepoInterfaceMockRecorder
}

// MockTokenRepoInterfaceMockRecorder is the mock recorder for MockTokenRepoInterface.
type MockTokenRepoInterfaceMockRecorder struct {
	mock *MockTokenRepoInterface
}

// NewMockTokenRepoInterface creates a new mock instance.
func NewMockTokenRepoInterface(ctrl *gomock.Controller) *MockTokenRepoInterface {
	mock := &MockTokenRepoInterface{ctrl: ctrl}
	mock.recorder = &MockTokenRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepoInterface) EXPECT() *MockTokenRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenRepoInterface) CreateToken(newToken *model.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", newToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenRepoInterfaceMockRecorder) CreateToken(newToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenRepoInterface)(nil).CreateToken), newToken)
}

// DeleteToken mocks base method.
func (m *MockTokenRepoInterface) DeleteToken(newToken *model.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", newToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockTokenRepoInterfaceMockRecorder) DeleteToken(newToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockTokenRepoInterface)(nil).DeleteToken), newToken)
}

// SymbolUnique mocks base method.
func (m *MockTokenRepoInterface) SymbolUnique(symbol string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SymbolUnique", symbol)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SymbolUnique indicates an expected call of SymbolUnique.
func (mr *MockTokenRepoInterfaceMockRecorder) SymbolUnique(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SymbolUnique", reflect.TypeOf((*MockTokenRepoInterface)(nil).SymbolUnique), symbol)
}

// UpdateToken mocks base method.
func (m *MockTokenRepoInterface) UpdateToken(newToken *model.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", newToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockTokenRepoInterfaceMockRecorder) UpdateToken(newToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockTokenRepoInterface)(nil).UpdateToken), newToken)
}

// ValidateTokenInUse mocks base method.
func (m *MockTokenRepoInterface) ValidateTokenInUse(tokenaddress uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTokenInUse", tokenaddress)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateTokenInUse indicates an expected call of ValidateTokenInUse.
func (mr *MockTokenRepoInterfaceMockRecorder) ValidateTokenInUse(tokenaddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTokenInUse", reflect.TypeOf((*MockTokenRepoInterface)(nil).ValidateTokenInUse), tokenaddress)
}
